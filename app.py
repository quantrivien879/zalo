import os
import json
import requests
from flask import Flask, request, jsonify
from google import genai
from google.genai import types
from datetime import datetime
import logging
import asyncio
from concurrent.futures import ThreadPoolExecutor
import secrets
import hmac
import hashlib

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# C·∫•u h√¨nh t·ª´ environment variables
ZALO_BOT_TOKEN = os.environ.get('ZALO_BOT_TOKEN')
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')  # URL webhook tr√™n Render
WEBHOOK_SECRET_TOKEN = os.environ.get('WEBHOOK_SECRET_TOKEN') or secrets.token_urlsafe(16)  # T·∫°o secret token ng·∫´u nhi√™n n·∫øu kh√¥ng c√≥

class ZaloBot:
    def __init__(self, token):
        self.token = token
        self.base_url = f"https://bot-api.zapps.me/bot{token}"  # S·ª≠ d·ª•ng Bot API
        
    def send_message(self, chat_id, text):
        """G·ª≠i tin nh·∫Øn text theo Bot API"""
        url = f"{self.base_url}/sendMessage"
        data = {
            'chat_id': str(chat_id),
            'text': text[:2000]  # Gi·ªõi h·∫°n 2000 k√Ω t·ª±
        }
        
        try:
            response = requests.post(url, json=data)
            logger.info(f"Sent message response: {response.status_code}")
            logger.info(f"Response content: {response.text}")
            return response.json() if response.status_code == 200 else response.json() if response.status_code == 200 else None
        except Exception as e:
            logger.error(f"Error sending message: {e}")
            return None
    
    def set_webhook(self, webhook_url, secret_token):
        """Thi·∫øt l·∫≠p webhook cho Bot API v·ªõi secret_token"""
        url = f"{self.base_url}/setWebhook"
        data = {
            'url': webhook_url,
            'secret_token': secret_token  # Th√™m secret_token (t·ªëi thi·ªÉu 8 k√Ω t·ª±)
        }
        
        try:
            response = requests.post(url, json=data)
            logger.info(f"Webhook setup response: {response.status_code}")
            logger.info(f"Response content: {response.text}")
            return response.json() if response.status_code == 200 else response.json()
        except Exception as e:
            logger.error(f"Error setting webhook: {e}")
            return None

    def get_bot_info(self):
        """L·∫•y th√¥ng tin bot ƒë·ªÉ test token"""
        url = f"{self.base_url}/getMe"
        
        try:
            response = requests.get(url)
            logger.info(f"Get bot info response: {response.status_code}")
            logger.info(f"Response content: {response.text}")
            return response.json() if response.status_code == 200 else None
        except Exception as e:
            logger.error(f"Error getting bot info: {e}")
            return None

class GeminiAI:
    def __init__(self, api_key):
        self.client = genai.Client(api_key=api_key)
        self.model = "gemini-2.5-flash"
        self.executor = ThreadPoolExecutor(max_workers=2)
        
    def generate_response(self, message, context=None, use_search=False):
        """T·∫°o ph·∫£n h·ªìi t·ª´ Gemini v·ªõi kh·∫£ nƒÉng t√¨m ki·∫øm"""
        try:
            # Th√™m context n·∫øu c√≥
            prompt = message
            if context:
                prompt = f"Ng·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán tr∆∞·ªõc ƒë√≥:\n{context}\n\nTin nh·∫Øn hi·ªán t·∫°i: {message}"
            
            # Th√™m h∆∞·ªõng d·∫´n cho bot
            system_prompt = """
            B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh v√† h·ªØu √≠ch tr√™n Zalo. 
            H√£y tr·∫£ l·ªùi m·ªôt c√°ch t·ª± nhi√™n, th√¢n thi·ªán v√† h·ªØu √≠ch.
            Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát tr·ª´ khi ƒë∆∞·ª£c y√™u c·∫ßu ng√¥n ng·ªØ kh√°c.
            Gi·ªØ c√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn v√† d·ªÖ hi·ªÉu (t·ªëi ƒëa 500 t·ª´).
            
            N·∫øu c√¢u h·ªèi c·∫ßn th√¥ng tin m·ªõi nh·∫•t ho·∫∑c t√¨m ki·∫øm tr√™n internet, 
            h√£y s·ª≠ d·ª•ng c√¥ng c·ª• t√¨m ki·∫øm ƒë·ªÉ c√≥ th√¥ng tin ch√≠nh x√°c.
            """
            
            full_prompt = f"{system_prompt}\n\n{prompt}"
            
            # T·∫°o content cho API m·ªõi
            contents = [
                types.Content(
                    role="user",
                    parts=[
                        types.Part.from_text(text=full_prompt),
                    ],
                ),
            ]
            
            # C·∫•u h√¨nh tools n·∫øu c·∫ßn t√¨m ki·∫øm
            tools = []
            if use_search or self._should_use_search(message):
                tools.append(types.Tool(googleSearch=types.GoogleSearch()))
            
            # C·∫•u h√¨nh generation
            generate_content_config = types.GenerateContentConfig(
                thinking_config=types.ThinkingConfig(
                    thinking_budget=-1,  # Unlimited thinking
                ),
                tools=tools if tools else None,
            )
            
            # Generate response
            response_text = ""
            for chunk in self.client.models.generate_content_stream(
                model=self.model,
                contents=contents,
                config=generate_content_config,
            ):
                if chunk.text:
                    response_text += chunk.text
            
            return response_text if response_text else "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o ƒë∆∞·ª£c ph·∫£n h·ªìi l√∫c n√†y."
            
        except Exception as e:
            logger.error(f"Error generating response: {e}")
            return "Xin l·ªói, t√¥i ƒëang g·∫∑p ch√∫t v·∫•n ƒë·ªÅ. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i sau kh√¥ng?"
    
    def _should_use_search(self, message):
        """Ki·ªÉm tra xem c√≥ n√™n s·ª≠ d·ª•ng t√¨m ki·∫øm kh√¥ng"""
        search_keywords = [
            'tin t·ª©c', 'news', 'm·ªõi nh·∫•t', 'hi·ªán t·∫°i', 'h√¥m nay',
            'gi√°', 'price', 't·ª∑ gi√°', 'th·ªùi ti·∫øt', 'weather',
            't√¨m ki·∫øm', 'search', 'th√¥ng tin v·ªÅ', 'what is',
            'covid', 'virus', 'd·ªãch b·ªánh', 'b·∫ßu c·ª≠', 'election'
        ]
        
        message_lower = message.lower()
        return any(keyword in message_lower for keyword in search_keywords)

def verify_webhook_signature(secret_token, request_data):
    """X√°c minh webhook signature (optional security measure)"""
    # ƒê√¢y l√† h√†m optional ƒë·ªÉ x√°c minh signature n·∫øu Zalo h·ªó tr·ª£
    # Hi·ªán t·∫°i ch·ªâ ki·ªÉm tra header secret token c∆° b·∫£n
    return True

# Kh·ªüi t·∫°o bot v√† AI
zalo_bot = ZaloBot(ZALO_BOT_TOKEN) if ZALO_BOT_TOKEN else None
gemini_ai = GeminiAI(GEMINI_API_KEY) if GEMINI_API_KEY else None

# L∆∞u tr·ªØ context ng∆∞·ªùi d√πng ƒë∆°n gi·∫£n (trong th·ª±c t·∫ø n√™n d√πng database)
user_context = {}

@app.route('/')
def health_check():
    """Health check endpoint"""
    return jsonify({
        "status": "running",
        "bot_configured": bool(ZALO_BOT_TOKEN),
        "gemini_configured": bool(GEMINI_API_KEY),
        "webhook_secret_configured": bool(WEBHOOK_SECRET_TOKEN),
        "timestamp": datetime.now().isoformat(),
        "api_type": "Zalo Bot API with Secret Token"
    })

@app.route('/webhook', methods=['POST'])
def webhook():
    """X·ª≠ l√Ω webhook t·ª´ Zalo Bot API"""
    try:
        # L·∫•y secret token t·ª´ header (n·∫øu Zalo g·ª≠i)
        received_secret = request.headers.get('X-Zalo-Bot-Secret-Token')
        
        # Ki·ªÉm tra secret token n·∫øu c√≥
        if WEBHOOK_SECRET_TOKEN and received_secret:
            if received_secret != WEBHOOK_SECRET_TOKEN:
                logger.warning("Invalid webhook secret token")
                return jsonify({"status": "forbidden"}), 403
        
        data = request.get_json()
        logger.info(f"Received webhook data: {json.dumps(data, indent=2)}")
        
        if not data:
            return jsonify({"status": "no data"}), 400
        
        # X·ª≠ l√Ω tin nh·∫Øn t·ª´ Bot API
        if 'message' in data:
            handle_message(data)
        
        return jsonify({"status": "ok"}), 200
        
    except Exception as e:
        logger.error(f"Error in webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

def handle_message(data):
    """X·ª≠ l√Ω tin nh·∫Øn t·ª´ Bot API"""
    try:
        message_data = data.get('message', {})
        chat_id = message_data.get('chat', {}).get('id')
        user_id = message_data.get('from', {}).get('id')
        text = message_data.get('text', '')
        
        if not chat_id or not text:
            logger.warning("Missing chat_id or text in message")
            return
        
        logger.info(f"Received message from {user_id} in chat {chat_id}: {text}")
        
        # X·ª≠ l√Ω c√°c l·ªánh ƒë·∫∑c bi·ªát
        if text.lower().startswith('/start'):
            response = """ü§ñ Xin ch√†o! T√¥i l√† Bot AI ƒë∆∞·ª£c trang b·ªã Gemini 2.5 Flash v·ªõi kh·∫£ nƒÉng:

‚ú® Tr·∫£ l·ªùi c√¢u h·ªèi th√¥ng minh
üîç T√¨m ki·∫øm th√¥ng tin m·ªõi nh·∫•t tr√™n Google  
üí≠ Suy nghƒ© logic v√† ph√¢n t√≠ch s√¢u
üó£Ô∏è Tr√≤ chuy·ªán t·ª± nhi√™n b·∫±ng ti·∫øng Vi·ªát
üîí B·∫£o m·∫≠t v·ªõi Secret Token

H√£y g·ª≠i b·∫•t k·ª≥ c√¢u h·ªèi n√†o b·∫°n mu·ªën!"""
            zalo_bot.send_message(chat_id, response)
            return
            
        elif text.lower().startswith('/help'):
            response = """üìã Danh s√°ch l·ªánh:
/start - Kh·ªüi ƒë·ªông bot
/help - Hi·ªÉn th·ªã tr·ª£ gi√∫p
/clear - X√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán
/search [c√¢u h·ªèi] - T√¨m ki·∫øm th√¥ng tin m·ªõi nh·∫•t
/token - Hi·ªÉn th·ªã th√¥ng tin secret token

ü§ñ T√≠nh nƒÉng AI m·ªõi:
‚Ä¢ Gemini 2.5 Flash - Model m·ªõi nh·∫•t
‚Ä¢ T√¨m ki·∫øm Google t·ª± ƒë·ªông
‚Ä¢ Kh·∫£ nƒÉng suy nghƒ© logic (thinking)
‚Ä¢ Tr·∫£ l·ªùi d·ª±a tr√™n th√¥ng tin real-time
‚Ä¢ Nh·ªõ ng·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán
‚Ä¢ B·∫£o m·∫≠t webhook v·ªõi secret token

üîç T·ª± ƒë·ªông t√¨m ki·∫øm khi:
‚Ä¢ H·ªèi tin t·ª©c, th·ªùi ti·∫øt
‚Ä¢ H·ªèi gi√° c·∫£, t·ª∑ gi√°
‚Ä¢ C·∫ßn th√¥ng tin m·ªõi nh·∫•t
‚Ä¢ H·ªèi v·ªÅ s·ª± ki·ªán hi·ªán t·∫°i

Ch·ªâ c·∫ßn g·ª≠i tin nh·∫Øn b√¨nh th∆∞·ªùng ƒë·ªÉ b·∫Øt ƒë·∫ßu!"""
            zalo_bot.send_message(chat_id, response)
            return
            
        elif text.lower().startswith('/clear'):
            context_key = f"{chat_id}_{user_id}"
            if context_key in user_context:
                del user_context[context_key]
            response = "üóëÔ∏è ƒê√£ x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán!"
            zalo_bot.send_message(chat_id, response)
            return
            
        elif text.lower().startswith('/token'):
            response = f"""üîê **Th√¥ng tin Secret Token:**

‚úÖ Secret Token ƒë∆∞·ª£c c·∫•u h√¨nh: {"C√≥" if WEBHOOK_SECRET_TOKEN else "Kh√¥ng"}
üìù Token length: {len(WEBHOOK_SECRET_TOKEN) if WEBHOOK_SECRET_TOKEN else 0} k√Ω t·ª±
üîí Token (·∫©n): {"*" * min(len(WEBHOOK_SECRET_TOKEN), 8) if WEBHOOK_SECRET_TOKEN else "Ch∆∞a c√≥"}

üí° Secret Token ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ x√°c minh t√≠nh x√°c th·ª±c c·ªßa webhook requests t·ª´ Zalo."""
            zalo_bot.send_message(chat_id, response)
            return
            
        elif text.lower().startswith('/search '):
            search_query = text[8:]  # B·ªè "/search "
            if search_query.strip():
                logger.info(f"Force search for: {search_query}")
                zalo_bot.send_message(chat_id, "üîç ƒêang t√¨m ki·∫øm th√¥ng tin m·ªõi nh·∫•t...")
                if gemini_ai:
                    ai_response = gemini_ai.generate_response(search_query, None, use_search=True)
                    zalo_bot.send_message(chat_id, f"üîç **K·∫øt qu·∫£ t√¨m ki·∫øm:**\n\n{ai_response}")
                return
            else:
                zalo_bot.send_message(chat_id, "‚ùå Vui l√≤ng nh·∫≠p n·ªôi dung c·∫ßn t√¨m ki·∫øm. V√≠ d·ª•: /search gi√° Bitcoin h√¥m nay")
                return
        
        # S·ª≠ d·ª•ng Gemini AI ƒë·ªÉ t·∫°o ph·∫£n h·ªìi
        if gemini_ai:
            try:
                # L·∫•y context c·ªßa user (k·∫øt h·ª£p chat_id v√† user_id)
                context_key = f"{chat_id}_{user_id}"
                context = user_context.get(context_key, [])
                context_text = None
                if context:
                    # L·∫•y 3 tin nh·∫Øn g·∫ßn nh·∫•t l√†m context
                    recent_context = context[-6:]  # 3 c·∫∑p h·ªèi-ƒë√°p
                    context_text = "\n".join([f"User: {ctx['user']}\nBot: {ctx['bot']}" for ctx in recent_context])
                
                # Ki·ªÉm tra xem c√≥ n√™n th√¥ng b√°o ƒëang t√¨m ki·∫øm kh√¥ng
                will_search = gemini_ai._should_use_search(text)
                if will_search:
                    zalo_bot.send_message(chat_id, "üîç ƒêang t√¨m ki·∫øm th√¥ng tin m·ªõi nh·∫•t...")
                
                # T·∫°o ph·∫£n h·ªìi v·ªõi SDK m·ªõi
                ai_response = gemini_ai.generate_response(text, context_text)
                
                # L∆∞u context
                if context_key not in user_context:
                    user_context[context_key] = []
                
                user_context[context_key].append({
                    'user': text,
                    'bot': ai_response,
                    'timestamp': datetime.now().isoformat()
                })
                
                # Gi·ªØ ch·ªâ 10 c·∫∑p h·ªèi-ƒë√°p g·∫ßn nh·∫•t
                if len(user_context[context_key]) > 10:
                    user_context[context_key] = user_context[context_key][-10:]
                
                # G·ª≠i ph·∫£n h·ªìi v·ªõi prefix n·∫øu ƒë√£ t√¨m ki·∫øm
                if will_search:
                    final_response = f"üîç **Th√¥ng tin m·ªõi nh·∫•t:**\n\n{ai_response}"
                else:
                    final_response = ai_response
                    
                zalo_bot.send_message(chat_id, final_response)
                
            except Exception as e:
                logger.error(f"Error in AI processing: {e}")
                zalo_bot.send_message(chat_id, "‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω. T√¥i s·∫Ω th·ª≠ tr·∫£ l·ªùi ƒë∆°n gi·∫£n...")
                
                # Fallback response
                fallback_response = f"üìù T√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c: \"{text}\"\n\nüí° B·∫°n c√≥ th·ªÉ th·ª≠:\n‚Ä¢ Di·ªÖn ƒë·∫°t l·∫°i c√¢u h·ªèi\n‚Ä¢ S·ª≠ d·ª•ng /help ƒë·ªÉ xem h∆∞·ªõng d·∫´n\n‚Ä¢ D√πng /search [n·ªôi dung] ƒë·ªÉ t√¨m ki·∫øm"
                zalo_bot.send_message(chat_id, fallback_response)
            
        else:
            # Fallback n·∫øu kh√¥ng c√≥ Gemini
            response = f"üìù T√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn: {text}\n\n‚ö†Ô∏è T√≠nh nƒÉng AI ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ k√≠ch ho·∫°t."
            zalo_bot.send_message(chat_id, response)
            
    except Exception as e:
        logger.error(f"Error handling message: {e}")

@app.route('/test-token', methods=['GET'])
def test_token():
    """Test Zalo Bot Token"""
    try:
        if not ZALO_BOT_TOKEN:
            return jsonify({"error": "ZALO_BOT_TOKEN not configured"}), 400
        
        if not zalo_bot:
            return jsonify({"error": "ZaloBot not initialized"}), 400
        
        # Test v·ªõi getMe API
        result = zalo_bot.get_bot_info()
        
        return jsonify({
            "token_configured": True,
            "bot_info": result,
            "token_valid": result is not None and result.get('ok') == True,
            "secret_token_configured": bool(WEBHOOK_SECRET_TOKEN),
            "secret_token_length": len(WEBHOOK_SECRET_TOKEN) if WEBHOOK_SECRET_TOKEN else 0
        })
        
    except Exception as e:
        logger.error(f"Error testing token: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/setup-webhook', methods=['POST', 'GET'])
def setup_webhook():
    """Endpoint ƒë·ªÉ thi·∫øt l·∫≠p webhook v·ªõi secret token"""
    try:
        logger.info("Setting up webhook with secret token...")
        
        if not ZALO_BOT_TOKEN:
            return jsonify({"error": "ZALO_BOT_TOKEN not configured", "success": False}), 400
            
        if not WEBHOOK_URL:
            return jsonify({"error": "WEBHOOK_URL not configured", "success": False}), 400
            
        if not WEBHOOK_SECRET_TOKEN:
            return jsonify({"error": "WEBHOOK_SECRET_TOKEN not configured", "success": False}), 400
        
        if not zalo_bot:
            return jsonify({"error": "ZaloBot not initialized", "success": False}), 400
        
        # Ki·ªÉm tra ƒë·ªô d√†i secret token
        if len(WEBHOOK_SECRET_TOKEN) < 8:
            return jsonify({
                "error": "WEBHOOK_SECRET_TOKEN must be at least 8 characters long", 
                "success": False,
                "current_length": len(WEBHOOK_SECRET_TOKEN)
            }), 400
        
        webhook_endpoint = WEBHOOK_URL + '/webhook'
        logger.info(f"Using webhook URL: {webhook_endpoint}")
        logger.info(f"Using secret token length: {len(WEBHOOK_SECRET_TOKEN)} characters")
        
        # Thi·∫øt l·∫≠p webhook v·ªõi secret token
        result = zalo_bot.set_webhook(webhook_endpoint, WEBHOOK_SECRET_TOKEN)
        logger.info(f"Webhook setup result: {result}")
        
        if result and result.get('ok') == True:
            return jsonify({
                "success": True,
                "webhook_url": webhook_endpoint,
                "secret_token_configured": True,
                "secret_token_length": len(WEBHOOK_SECRET_TOKEN),
                "zalo_response": result
            })
        else:
            return jsonify({
                "success": False,
                "error": "Failed to setup webhook",
                "webhook_url": webhook_endpoint,
                "secret_token_length": len(WEBHOOK_SECRET_TOKEN),
                "zalo_response": result
            }), 500
            
    except Exception as e:
        logger.error(f"Error setting up webhook: {e}")
        return jsonify({
            "success": False,
            "error": str(e),
            "webhook_url": WEBHOOK_URL + '/webhook' if WEBHOOK_URL else "Not configured",
            "secret_token_configured": bool(WEBHOOK_SECRET_TOKEN),
            "secret_token_length": len(WEBHOOK_SECRET_TOKEN) if WEBHOOK_SECRET_TOKEN else 0
        }), 500

@app.route('/generate-secret', methods=['POST'])
def generate_secret():
    """Endpoint ƒë·ªÉ t·∫°o secret token m·ªõi"""
    try:
        new_secret = secrets.token_urlsafe(16)  # T·∫°o secret 16 k√Ω t·ª±
        
        return jsonify({
            "success": True,
            "new_secret_token": new_secret,
            "length": len(new_secret),
            "message": "Vui l√≤ng copy secret token n√†y v√† set l√†m environment variable WEBHOOK_SECRET_TOKEN",
            "instructions": [
                "1. Copy secret token n√†y",
                "2. Set environment variable: WEBHOOK_SECRET_TOKEN=" + new_secret,
                "3. Restart ·ª©ng d·ª•ng",
                "4. G·ªçi l·∫°i /setup-webhook ƒë·ªÉ c·∫≠p nh·∫≠t"
            ]
        })
        
    except Exception as e:
        logger.error(f"Error generating secret: {e}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8000))
    
    # Log th√¥ng tin c·∫•u h√¨nh
    logger.info("üöÄ Starting Zalo Bot with Gemini 2.5 Flash + Google Search + Secret Token")
    logger.info(f"Port: {port}")
    logger.info(f"Zalo Bot Token configured: {bool(ZALO_BOT_TOKEN)}")
    logger.info(f"Gemini API configured: {bool(GEMINI_API_KEY)}")
    logger.info(f"Webhook URL: {WEBHOOK_URL}")
    logger.info(f"Secret Token configured: {bool(WEBHOOK_SECRET_TOKEN)}")
    logger.info(f"Secret Token length: {len(WEBHOOK_SECRET_TOKEN) if WEBHOOK_SECRET_TOKEN else 0} characters")
    logger.info(f"Bot API URL: {zalo_bot.base_url if zalo_bot else 'Not configured'}")
    logger.info("‚ú® Features: Zalo Bot API, Thinking, Google Search, Streaming responses, Webhook Security")
    
    app.run(host='0.0.0.0', port=port, debug=False)
