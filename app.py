import os
import json
import requests
from flask import Flask, request, jsonify
from google import genai
from google.genai import types
from datetime import datetime
import logging
import asyncio
from concurrent.futures import ThreadPoolExecutor

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# C·∫•u h√¨nh t·ª´ environment variables
ZALO_BOT_TOKEN = os.environ.get('ZALO_BOT_TOKEN')
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')  # URL webhook tr√™n Render

class ZaloBot:
    def __init__(self, token):
        self.token = token
        self.base_url = "https://openapi.zalo.me/v3.0"
        
    def send_message(self, user_id, message):
        """G·ª≠i tin nh·∫Øn text"""
        url = f"{self.base_url}/oa/message/cs"
        headers = {
            'Content-Type': 'application/json',
            'access_token': self.token
        }
        data = {
            'recipient': {
                'user_id': user_id
            },
            'message': {
                'text': message
            }
        }
        
        try:
            response = requests.post(url, headers=headers, json=data)
            logger.info(f"Sent message response: {response.status_code}")
            return response.json()
        except Exception as e:
            logger.error(f"Error sending message: {e}")
            return None
    
    def send_typing_action(self, user_id):
        """G·ª≠i action ƒëang g√µ"""
        url = f"{self.base_url}/oa/message/cs"
        headers = {
            'Content-Type': 'application/json',
            'access_token': self.token
        }
        data = {
            'recipient': {
                'user_id': user_id
            },
            'sender_action': 'typing_on'
        }
        
        try:
            response = requests.post(url, headers=headers, json=data)
            return response.json()
        except Exception as e:
            logger.error(f"Error sending typing action: {e}")
            return None

    def set_webhook(self, webhook_url):
        """Thi·∫øt l·∫≠p webhook"""
        url = f"{self.base_url}/oa/webhook"
        headers = {
            'Content-Type': 'application/json',
            'access_token': self.token
        }
        data = {
            'url': webhook_url,
            'events': ['user_send_text', 'user_send_image', 'user_send_link']
        }
        
        try:
            response = requests.post(url, headers=headers, json=data)
            logger.info(f"Webhook setup response: {response.status_code}")
            return response.json()
        except Exception as e:
            logger.error(f"Error setting webhook: {e}")
            return None

class GeminiAI:
    def __init__(self, api_key):
        self.client = genai.Client(api_key=api_key)
        self.model = "gemini-2.5-flash"
        self.executor = ThreadPoolExecutor(max_workers=2)
        
    def generate_response(self, message, context=None, use_search=False):
        """T·∫°o ph·∫£n h·ªìi t·ª´ Gemini v·ªõi kh·∫£ nƒÉng t√¨m ki·∫øm"""
        try:
            # Th√™m context n·∫øu c√≥
            prompt = message
            if context:
                prompt = f"Ng·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán tr∆∞·ªõc ƒë√≥:\n{context}\n\nTin nh·∫Øn hi·ªán t·∫°i: {message}"
            
            # Th√™m h∆∞·ªõng d·∫´n cho bot
            system_prompt = """
            B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh v√† h·ªØu √≠ch tr√™n Zalo. 
            H√£y tr·∫£ l·ªùi m·ªôt c√°ch t·ª± nhi√™n, th√¢n thi·ªán v√† h·ªØu √≠ch.
            Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát tr·ª´ khi ƒë∆∞·ª£c y√™u c·∫ßu ng√¥n ng·ªØ kh√°c.
            Gi·ªØ c√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn v√† d·ªÖ hi·ªÉu (t·ªëi ƒëa 500 t·ª´).
            
            N·∫øu c√¢u h·ªèi c·∫ßn th√¥ng tin m·ªõi nh·∫•t ho·∫∑c t√¨m ki·∫øm tr√™n internet, 
            h√£y s·ª≠ d·ª•ng c√¥ng c·ª• t√¨m ki·∫øm ƒë·ªÉ c√≥ th√¥ng tin ch√≠nh x√°c.
            """
            
            full_prompt = f"{system_prompt}\n\n{prompt}"
            
            # T·∫°o content cho API m·ªõi
            contents = [
                types.Content(
                    role="user",
                    parts=[
                        types.Part.from_text(text=full_prompt),
                    ],
                ),
            ]
            
            # C·∫•u h√¨nh tools n·∫øu c·∫ßn t√¨m ki·∫øm
            tools = []
            if use_search or self._should_use_search(message):
                tools.append(types.Tool(googleSearch=types.GoogleSearch()))
            
            # C·∫•u h√¨nh generation
            generate_content_config = types.GenerateContentConfig(
                thinking_config=types.ThinkingConfig(
                    thinking_budget=-1,  # Unlimited thinking
                ),
                tools=tools if tools else None,
            )
            
            # Generate response
            response_text = ""
            for chunk in self.client.models.generate_content_stream(
                model=self.model,
                contents=contents,
                config=generate_content_config,
            ):
                if chunk.text:
                    response_text += chunk.text
            
            return response_text if response_text else "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o ƒë∆∞·ª£c ph·∫£n h·ªìi l√∫c n√†y."
            
        except Exception as e:
            logger.error(f"Error generating response: {e}")
            return "Xin l·ªói, t√¥i ƒëang g·∫∑p ch√∫t v·∫•n ƒë·ªÅ. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i sau kh√¥ng?"
    
    def _should_use_search(self, message):
        """Ki·ªÉm tra xem c√≥ n√™n s·ª≠ d·ª•ng t√¨m ki·∫øm kh√¥ng"""
        search_keywords = [
            'tin t·ª©c', 'news', 'm·ªõi nh·∫•t', 'hi·ªán t·∫°i', 'h√¥m nay',
            'gi√°', 'price', 't·ª∑ gi√°', 'th·ªùi ti·∫øt', 'weather',
            't√¨m ki·∫øm', 'search', 'th√¥ng tin v·ªÅ', 'what is',
            'covid', 'virus', 'd·ªãch b·ªánh', 'b·∫ßu c·ª≠', 'election'
        ]
        
        message_lower = message.lower()
        return any(keyword in message_lower for keyword in search_keywords)
    
    def generate_response_async(self, message, context=None, use_search=False):
        """Async wrapper cho generate_response"""
        return self.executor.submit(self.generate_response, message, context, use_search)

# Kh·ªüi t·∫°o bot v√† AI
zalo_bot = ZaloBot(ZALO_BOT_TOKEN)
gemini_ai = GeminiAI(GEMINI_API_KEY) if GEMINI_API_KEY else None

# L∆∞u tr·ªØ context ng∆∞·ªùi d√πng ƒë∆°n gi·∫£n (trong th·ª±c t·∫ø n√™n d√πng database)
user_context = {}

@app.route('/')
def health_check():
    """Health check endpoint"""
    return jsonify({
        "status": "running",
        "bot_configured": bool(ZALO_BOT_TOKEN),
        "gemini_configured": bool(GEMINI_API_KEY),
        "timestamp": datetime.now().isoformat()
    })

@app.route('/webhook', methods=['POST'])
def webhook():
    """X·ª≠ l√Ω webhook t·ª´ Zalo"""
    try:
        data = request.get_json()
        logger.info(f"Received webhook data: {json.dumps(data, indent=2)}")
        
        if not data:
            return jsonify({"status": "no data"}), 400
        
        # X·ª≠ l√Ω event
        if 'events' in data:
            for event in data['events']:
                handle_event(event)
        
        return jsonify({"status": "ok"}), 200
        
    except Exception as e:
        logger.error(f"Error in webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

def handle_event(event):
    """X·ª≠ l√Ω t·ª´ng event"""
    try:
        event_name = event.get('event_name')
        user_id = event.get('sender', {}).get('id')
        
        if not user_id:
            logger.warning("No user_id found in event")
            return
        
        logger.info(f"Handling event: {event_name} from user: {user_id}")
        
        if event_name == 'user_send_text':
            handle_text_message(event, user_id)
        elif event_name == 'user_send_image':
            handle_image_message(event, user_id)
        elif event_name == 'user_send_link':
            handle_link_message(event, user_id)
        else:
            logger.info(f"Unhandled event: {event_name}")
            
    except Exception as e:
        logger.error(f"Error handling event: {e}")

def handle_text_message(event, user_id):
    """X·ª≠ l√Ω tin nh·∫Øn text"""
    try:
        message = event.get('message', {}).get('text', '')
        
        if not message:
            return
        
        logger.info(f"Received message from {user_id}: {message}")
        
        # G·ª≠i typing action
        zalo_bot.send_typing_action(user_id)
        
        # X·ª≠ l√Ω c√°c l·ªánh ƒë·∫∑c bi·ªát
        if message.lower().startswith('/start'):
            response = """ü§ñ Xin ch√†o! T√¥i l√† Bot AI ƒë∆∞·ª£c trang b·ªã Gemini 2.5 Flash v·ªõi kh·∫£ nƒÉng:

‚ú® Tr·∫£ l·ªùi c√¢u h·ªèi th√¥ng minh
üîç T√¨m ki·∫øm th√¥ng tin m·ªõi nh·∫•t tr√™n Google  
üí≠ Suy nghƒ© logic v√† ph√¢n t√≠ch s√¢u
üó£Ô∏è Tr√≤ chuy·ªán t·ª± nhi√™n b·∫±ng ti·∫øng Vi·ªát

H√£y g·ª≠i b·∫•t k·ª≥ c√¢u h·ªèi n√†o b·∫°n mu·ªën!"""
            zalo_bot.send_message(user_id, response)
            return
            
        elif message.lower().startswith('/help'):
            response = """
üìã Danh s√°ch l·ªánh:
/start - Kh·ªüi ƒë·ªông bot
/help - Hi·ªÉn th·ªã tr·ª£ gi√∫p
/clear - X√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán
/search [c√¢u h·ªèi] - T√¨m ki·∫øm th√¥ng tin m·ªõi nh·∫•t

ü§ñ T√≠nh nƒÉng AI m·ªõi:
‚Ä¢ Gemini 2.5 Flash - Model m·ªõi nh·∫•t
‚Ä¢ T√¨m ki·∫øm Google t·ª± ƒë·ªông
‚Ä¢ Kh·∫£ nƒÉng suy nghƒ© logic (thinking)
‚Ä¢ Tr·∫£ l·ªùi d·ª±a tr√™n th√¥ng tin real-time
‚Ä¢ Nh·ªõ ng·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán

üîç T·ª± ƒë·ªông t√¨m ki·∫øm khi:
‚Ä¢ H·ªèi tin t·ª©c, th·ªùi ti·∫øt
‚Ä¢ H·ªèi gi√° c·∫£, t·ª∑ gi√°
‚Ä¢ C·∫ßn th√¥ng tin m·ªõi nh·∫•t
‚Ä¢ H·ªèi v·ªÅ s·ª± ki·ªán hi·ªán t·∫°i

Ch·ªâ c·∫ßn g·ª≠i tin nh·∫Øn b√¨nh th∆∞·ªùng ƒë·ªÉ b·∫Øt ƒë·∫ßu!
            """
            zalo_bot.send_message(user_id, response.strip())
            return
            
        elif message.lower().startswith('/clear'):
            if user_id in user_context:
                del user_context[user_id]
            response = "üóëÔ∏è ƒê√£ x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán!"
            zalo_bot.send_message(user_id, response)
            return
            
        elif message.lower().startswith('/search '):
            search_query = message[8:]  # B·ªè "/search "
            if search_query.strip():
                logger.info(f"Force search for: {search_query}")
                zalo_bot.send_message(user_id, "üîç ƒêang t√¨m ki·∫øm th√¥ng tin m·ªõi nh·∫•t...")
                if gemini_ai:
                    ai_response = gemini_ai.generate_response(search_query, None, use_search=True)
                    zalo_bot.send_message(user_id, f"üîç **K·∫øt qu·∫£ t√¨m ki·∫øm:**\n\n{ai_response}")
                return
            else:
                zalo_bot.send_message(user_id, "‚ùå Vui l√≤ng nh·∫≠p n·ªôi dung c·∫ßn t√¨m ki·∫øm. V√≠ d·ª•: /search gi√° Bitcoin h√¥m nay")
                return
        
        # S·ª≠ d·ª•ng Gemini AI ƒë·ªÉ t·∫°o ph·∫£n h·ªìi
        if gemini_ai:
            try:
                # L·∫•y context c·ªßa user
                context = user_context.get(user_id, [])
                context_text = None
                if context:
                    # L·∫•y 3 tin nh·∫Øn g·∫ßn nh·∫•t l√†m context
                    recent_context = context[-6:]  # 3 c·∫∑p h·ªèi-ƒë√°p
                    context_text = "\n".join([f"User: {ctx['user']}\nBot: {ctx['bot']}" for ctx in recent_context])
                
                # Ki·ªÉm tra xem c√≥ n√™n th√¥ng b√°o ƒëang t√¨m ki·∫øm kh√¥ng
                will_search = gemini_ai._should_use_search(message)
                if will_search:
                    zalo_bot.send_message(user_id, "üîç ƒêang t√¨m ki·∫øm th√¥ng tin m·ªõi nh·∫•t...")
                
                # T·∫°o ph·∫£n h·ªìi v·ªõi SDK m·ªõi
                ai_response = gemini_ai.generate_response(message, context_text)
                
                # L∆∞u context
                if user_id not in user_context:
                    user_context[user_id] = []
                
                user_context[user_id].append({
                    'user': message,
                    'bot': ai_response,
                    'timestamp': datetime.now().isoformat()
                })
                
                # Gi·ªØ ch·ªâ 10 c·∫∑p h·ªèi-ƒë√°p g·∫ßn nh·∫•t
                if len(user_context[user_id]) > 10:
                    user_context[user_id] = user_context[user_id][-10:]
                
                # G·ª≠i ph·∫£n h·ªìi v·ªõi prefix n·∫øu ƒë√£ t√¨m ki·∫øm
                if will_search:
                    final_response = f"üîç **Th√¥ng tin m·ªõi nh·∫•t:**\n\n{ai_response}"
                else:
                    final_response = ai_response
                    
                zalo_bot.send_message(user_id, final_response)
                
            except Exception as e:
                logger.error(f"Error in AI processing: {e}")
                zalo_bot.send_message(user_id, "‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω. T√¥i s·∫Ω th·ª≠ tr·∫£ l·ªùi ƒë∆°n gi·∫£n...")
                
                # Fallback response
                fallback_response = f"üìù T√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c: \"{message}\"\n\nüí° B·∫°n c√≥ th·ªÉ th·ª≠:\n‚Ä¢ Di·ªÖn ƒë·∫°t l·∫°i c√¢u h·ªèi\n‚Ä¢ S·ª≠ d·ª•ng /help ƒë·ªÉ xem h∆∞·ªõng d·∫´n\n‚Ä¢ D√πng /search [n·ªôi dung] ƒë·ªÉ t√¨m ki·∫øm"
                zalo_bot.send_message(user_id, fallback_response)
            
        else:
            # Fallback n·∫øu kh√¥ng c√≥ Gemini
            response = f"üìù T√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn: {message}\n\n‚ö†Ô∏è T√≠nh nƒÉng AI ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ k√≠ch ho·∫°t."
            zalo_bot.send_message(user_id, response)
            
    except Exception as e:
        logger.error(f"Error handling text message: {e}")
        zalo_bot.send_message(user_id, "‚ùå Xin l·ªói, ƒë√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i!")

def handle_image_message(event, user_id):
    """X·ª≠ l√Ω tin nh·∫Øn h√¨nh ·∫£nh"""
    try:
        response = "üñºÔ∏è C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i h√¨nh ·∫£nh! Hi·ªán t·∫°i t√¥i ch∆∞a th·ªÉ ph√¢n t√≠ch h√¨nh ·∫£nh, nh∆∞ng t√¥i c√≥ th·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi kh√°c c·ªßa b·∫°n."
        zalo_bot.send_message(user_id, response)
    except Exception as e:
        logger.error(f"Error handling image message: {e}")

def handle_link_message(event, user_id):
    """X·ª≠ l√Ω tin nh·∫Øn link"""
    try:
        response = "üîó C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª link! T√¥i c√≥ th·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ n·ªôi dung ho·∫∑c h·ªó tr·ª£ b·∫°n v·ªõi v·∫•n ƒë·ªÅ kh√°c."
        zalo_bot.send_message(user_id, response)
    except Exception as e:
        logger.error(f"Error handling link message: {e}")

@app.route('/setup-webhook', methods=['POST'])
def setup_webhook():
    """Endpoint ƒë·ªÉ thi·∫øt l·∫≠p webhook (ch·ªâ c·∫ßn g·ªçi 1 l·∫ßn)"""
    try:
        logger.info("Setting up webhook...")
        
        if not ZALO_BOT_TOKEN:
            return jsonify({"error": "ZALO_BOT_TOKEN not configured", "success": False}), 400
            
        if not WEBHOOK_URL:
            return jsonify({"error": "WEBHOOK_URL not configured", "success": False}), 400
        
        logger.info(f"Using webhook URL: {WEBHOOK_URL}")
        result = zalo_bot.set_webhook(WEBHOOK_URL)
        logger.info(f"Webhook setup result: {result}")
        
        if result:
            return jsonify({
                "success": True,
                "webhook_url": WEBHOOK_URL,
                "zalo_response": result
            })
        else:
            return jsonify({
                "success": False,
                "error": "Failed to setup webhook",
                "webhook_url": WEBHOOK_URL
            }), 500
            
    except Exception as e:
        logger.error(f"Error setting up webhook: {e}")
        return jsonify({
            "success": False,
            "error": str(e),
            "webhook_url": WEBHOOK_URL if WEBHOOK_URL else "Not configured"
        }), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8000))
    
    # Log th√¥ng tin c·∫•u h√¨nh
    logger.info("üöÄ Starting Zalo Bot with Gemini 2.5 Flash + Google Search")
    logger.info(f"Port: {port}")
    logger.info(f"Zalo Token configured: {bool(ZALO_BOT_TOKEN)}")
    logger.info(f"Gemini API configured: {bool(GEMINI_API_KEY)}")
    logger.info(f"Webhook URL: {WEBHOOK_URL}")
    logger.info("‚ú® Features: Thinking, Google Search, Streaming responses")
    
    app.run(host='0.0.0.0', port=port, debug=False)
